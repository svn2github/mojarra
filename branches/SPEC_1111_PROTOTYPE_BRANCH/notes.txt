Notes on Frank meeting

Open issues:

- Our decision to standardize TagDecorator, but not provide default
  implementations for its helper classes has led to this feature being
  underutilized.

- It may be the case that we need to expose these helper classes as part
  of the work that is being done in 1111-passThroughElement.

- On line 127 of DefaultTagDecorator, we convert anything that we
  already don't understand to an h:panelGroup.  This assumption will not
  be valid in all cases, so we need a more flexible solution.  Perhaps
  we can fall back to the javax.faces.passthrough renderer solution.

- How do we deal with the case when people try to use the feature
  outside the box in which they are allowed to use it?  For example
  using <form method="GET">?

- Revisit the contract between DefaultTagDecorator and
  HtmlResponseWriter.

- Frank's code gets the elementName and stores it as a TagAttribute
  instance in the tag's TagAttributes impl in the passThrough attribute
  namespace.  The HtmlResponseWriter knows to look in the passThrough
  attribute set for a specially named attribute called "elementName".

  My code has a component attribute
  Renderer.MARKUP_RENDERER_LOCALNAME_KEY that gets passed in from the
  PassThroughElementHandler.

Test files:

test/agnostic/renderKit/passthrough/src/main/webapp/complex.xhtml 
test/agnostic/renderKit/passthrough/src/main/webapp/button.xhtml  


SECTION: HTML5 spec section 4.10.2 form-associated elements and the
Component/Renderer pairings that map to them.

Element                       Component/Renderer
=======                       ==================

<button>                      h:commandButton
<input type="hidden">         h:inputHidden
<input type="password">       h:inputPassword
<input type="checkbox">       h:selectBooleanCheckbox
<input type="file">           h:inputFile
<input type="submit">         h:commandButton
<input type="reset">          h:commandButton
<input type="button">         h:commandButton
<input type="number">         h:inputText
<input type="tel">            h:inputText

<keygen>                      javax.faces.Input javax.faces.passthrough.Input 

<label>                       h:outputLabel

<object>                      h:panelGroup NOTE: HTML5 allows <object> to be
                              submitted, but I don't know what it means to 
                              submit an object.

<output>                      h:panelGroup NOTE: Same question as for <object>

<select>                      h:selectOneListbox or h:selectManyListbox, 
                              depending on the "multiple" attribute.

<fieldset>                    h:panelGroup NOTE: Same question as for <object>


SECTION: javax.faces.Input javax.faces.passthrough.Input pseudo-spec

This renderer currently says

  The decode behavior is identical to that of the javax.faces.Input
  javax.faces.Text renderer.

This is insufficient.  For each form-associated element this section
will enumerate what this renderer will do with that element.

<keygen name="key" /> 

This usage submits a request parameter with the name "key" and the value
being a public key generated by the browser.  It's appropriate for the
UIComponent to be a UIInput.  Of all the valid attributes for the
<keygen> element, the "key" attribute should be set as the value of the
UIInput.  The remaining attributes should just remain as passThrough
attributes.




